{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["moment","locale","App","useState","rotation","setRotation","useEffect","axios","get","then","res","data","catch","err","console","error","className","style","fontSize","marginBottom","_","map","Phases","phase","start","StartDateTime","end","EndDateTime","isAfter","remaining","isBefore","diff","duration","hours","minutes","key","format","width","src","find","maps","Id","StageID","MapFileName","textAlign","maxWidth","display","WeaponSets","weapon","index","weaponName","weapons","Name","includes","RareWeaponID","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"+yWASAA,IAAOC,OAAO,SAkFCC,MAhFf,WAAgB,IAAD,EACmBC,mBAAS,IAD5B,mBACNC,EADM,KACIC,EADJ,KAYb,OAVAC,oBAAU,WACRC,IAAMC,IAAI,+CACPC,KAAK,SAACC,GACLL,EAAYK,EAAIC,QAEjBC,MAAM,SAACC,GACNC,QAAQC,MAAMF,MAEjB,IAGD,yBAAKG,UAAU,OACb,8DACA,2EACA,yBAAKC,MAAO,CAACC,SAAU,GAAIC,aAAa,KAAxC,4DAGEC,IAAEC,IAAIjB,EAASkB,OAAQ,SAACC,GACtB,IAAMC,EAAQxB,IAAOuB,EAAME,cAAc,UACnCC,EAAM1B,IAAOuB,EAAMI,YAAY,UAErC,GAAID,EAAIE,QAAQ5B,OAAW,CACzB,IAAI6B,EAAY,KAChB,GAAIL,EAAMM,SAAS9B,OAAW,CAC5B,IAAM+B,EAAOL,EAAIK,KAAK/B,OAChBgC,EAAWhC,IAAOgC,SAASD,GACjCF,EAAY,qEAAcG,EAASC,QAAvB,uBAAmCD,EAASE,UAA5C,iBAEd,OAAO,yBAAKC,IAAKZ,EAAME,cAAeT,UAAU,QAC7Ca,EACD,8DACQL,EAAMY,OAAO,QAErB,yBAAKnB,MAAO,CAACE,aAAc,KAA3B,iCACQO,EAAIU,OAAO,QAEnB,6BAEE,6BAAK,yBAAKnB,MAAO,CAACoB,MAAO,QACfC,IAAG,0CAAqClB,IAAEmB,KAAKC,EAAM,CAACC,GAAIlB,EAAMmB,UAAUC,YAAvE,YAGf,yBAAK1B,MAAO,CAAC2B,UAAW,WACtB,yBAAK3B,MAAO,CAAC4B,SAAU,IAAKC,QAAS,iBAEjC1B,IAAEC,IAAIE,EAAMwB,WAAY,SAACC,EAAQC,GAC/B,IAAIC,EAQJ,OANEA,EADE9B,IAAEmB,KAAKY,EAAS,CAACV,GAAIO,IACb,cAAU5B,IAAEmB,KAAKY,EAAS,CAACV,GAAIO,IAASI,OAC7B,IAAZJ,EACI,eAEA,gBAER,yBAAKb,IAAKc,EAAOhC,MAAO,CAAC6B,QAAS,eAAgBT,MAAO,QAC9D,yBAAKpB,MAAO,CAACoB,MAAO,OAAQC,IAAG,kDAA6CY,EAA7C,eAOvC9B,IAAEiC,SAAS9B,EAAMwB,YAAa,IAC9B,yBACET,IAAG,sDAAiDlB,IAAEmB,KAAKY,EAAS,CAACV,GAAIlB,EAAM+B,eAAeF,KAA3F,WAKT,OAAO,SCtECG,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMzD,KAAK,SAAA0D,GACjCA,EAAaC,iB","file":"static/js/main.f3bc84f6.chunk.js","sourcesContent":["import React, {useEffect, useState} from 'react'\nimport './App.css'\nimport maps from './maps.json'\nimport weapons from './weapons'\nimport _ from 'lodash'\nimport moment from 'moment'\nimport 'moment/locale/zh-cn'\nimport axios from 'axios'\n\nmoment.locale('zh-cn')\n\nfunction App() {\n  const [rotation, setRotation] = useState({})\n  useEffect(() => {\n    axios.get('https://files.oatmealdome.me/bcat/coop.json')\n      .then((res) => {\n        setRotation(res.data)\n      })\n      .catch((err) => {\n        console.error(err)\n      })\n  }, [])\n\n  return (\n    <div className=\"App\">\n      <h3>Splatoon 2 Salmon Run rotation</h3>\n      <h3>乌贼2打工时间表</h3>\n      <div style={{fontSize: 12, marginBottom:10}}>夜风制作 打工qq群: 138151784</div>\n      {/*<img src={logo} className=\"App-logo\" alt=\"logo\" />*/}\n      {\n        _.map(rotation.Phases, (phase) => {\n          const start = moment(phase.StartDateTime+'+00:00')\n          const end = moment(phase.EndDateTime+'+00:00')\n\n          if (end.isAfter(moment())) {\n            let remaining = null\n            if (start.isBefore(moment())) {\n              const diff = end.diff(moment())\n              const duration = moment.duration(diff)\n              remaining = <div>{`距离结束：${duration.hours()}小时${duration.minutes()}分钟`}</div>\n            }\n            return <div key={phase.StartDateTime} className='card'>\n              {remaining}\n              <div>\n                开始时间：{start.format('lll')}\n              </div>\n              <div style={{marginBottom: 20}}>\n                结束时间：{end.format('lll')}\n              </div>\n              <div>\n                {/*<div>{phase.StageID}</div>*/}\n                <div><img style={{width: '100%'}}\n                          src={`https://leanny.github.io/stages/${_.find(maps, {Id: phase.StageID}).MapFileName}.png`}/>\n                </div>\n              </div>\n              <div style={{textAlign: 'center'}}>\n                <div style={{maxWidth: 625, display: 'inline-block'}}>\n                  {\n                    _.map(phase.WeaponSets, (weapon, index) => {\n                      let weaponName\n                      if (_.find(weapons, {Id: weapon})) {\n                        weaponName = `Wst_${_.find(weapons, {Id: weapon}).Name}`\n                      } else if (weapon === -1) {\n                        weaponName = 'questionmark'\n                      } else {\n                        weaponName = 'questionmark2'\n                      }\n                      return <div key={index} style={{display: 'inline-block', width: '25%'}}>\n                        <img style={{width: '90%'}} src={`https://leanny.github.io/splat2/weapons/${weaponName}.png`}/>\n                      </div>\n                    })\n                  }\n                </div>\n              </div>\n              {\n                _.includes(phase.WeaponSets, -1) &&\n                <img\n                  src={`https://leanny.github.io/splat2/weapons/Wst_${_.find(weapons, {Id: phase.RareWeaponID}).Name}.png`}/>\n              }\n\n            </div>\n          } else {\n            return null\n          }\n        })\n      }\n\n    </div>\n  )\n}\n\nexport default App\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}